worker_processes 4;

events { worker_connections 1024; }

http {
    server_names_hash_bucket_size 64;
    # Act as Load Balancer for 4 nodes
    upstream pokemon-webapi.local {
        server pokemonapi_pokemon-webapi_1:7000;
        server pokemonapi_pokemon-webapi_2:7000;
        server pokemonapi_pokemon-webapi_3:7000;
        server pokemonapi_pokemon-webapi_4:7000;
    }

    map $http_upgrade $connection_upgrade {
        default Upgrade;
        ''      close;
    }
    # Redirect all HTTP traffic to HTTPS
    server {
      listen 80;
      return 301 https://$host$request_uri;
    }
    
    # HTTPS Server
    server {
        listen 443 ssl http2;
        # Server name. You need a DNS record (or add this hostname to your hosts file)
        server_name pokemon-webapi.local;

        # Digital certificates generated with makecert.sh / makecert.bat
        ssl_certificate           /etc/nginx/server.crt;
        ssl_certificate_key       /etc/nginx/server.key;

        # SSL configuration
        ssl_session_cache  builtin:1000  shared:SSL:10m;
        ssl_protocols  TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
        ssl_prefer_server_ciphers on;

        # Location configuration to use the pokemon-webapi.local upstream defined before
        location / {
            proxy_pass          http://pokemon-webapi.local;
            proxy_read_timeout  90;
            proxy_set_header    Upgrade $http_upgrade;
            proxy_set_header    Connection $connection_upgrade;
            proxy_set_header    Host $host;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;       

            proxy_redirect      http://localhost https://pokemon-webapi.local;
        }
    }
}
